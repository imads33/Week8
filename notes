
DataStructure :-
It is a way of arranging data on a computer so that it can be accessed and updated efficiently.

Types :

1.Linear data structure:
------------------------
Data structure in which data elements are arranged sequentially or linearly, 
where each element is attached to its previous and next adjacent elements, is called a linear data structure. 

Examples of linear data structures are 
1.array, 
2.stack, 
3.queue, 
4.linked list

Static data structure:
---------------------- 
Static data structure has a fixed memory size. 
It is easier to access the elements in a static data structure. 

An example  
1.array.

operations:
insert,delete,search etc.

Dynamic data structure:
----------------------- 
In dynamic data structure, the size is not fixed. 
It can be randomly updated during the runtime 
which may be considered efficient concerning the memory (space) complexity of the code. 

Examples 
1.queue, 
2.stack,
3.linked list

Queue
-----
->follows Fisrt in first out(FIFO) rule.
->has two sides front and rear
->insertion ad rear and deletion at front
->Oprations
enqueue
dequeue
isfull
isempty

stack
-----
-> follows last in first out(LIFO) or Fisrt in Last out rule
-> has one side
-> insertion and deletione at same side
->Oprations
insert 
delete
isfull
isempty

linked list
-----------
->collection of nodes
-> 4 types - single linked list and double linked list,circuler SLL circular DLL

single linked list:
-> each node has 2 fields---data and address
-> data stores actual data/value
-> address stores the location/address of next data/value

double linked list:
-> each node has 3 fields---data and address(2)
-> data stores actual data/value
-> address stores the location/address of next and previous data/value


--------------------------
Non-linear data structure:
--------------------------
Data structures where data elements are not placed sequentially or linearly are called non-linear data structures.
In a non-linear data structure, we canâ€™t traverse all the elements in a single run only. 

Examples
1.trees
2.graphs.

Collection Framework
what is Framework
1.Readymade Architecture
2.It Provides set of classes and interfaces
 
Collection:
 
it represents group of objects in a single unit
 
Eample:
School bag
list of students in college
set of employess in company
set of programs in drive
list of tasks in queue
 
operation:
insertion
searching
deletion
display
traversing
update
 
Iterable->Collection->(Interfaces)
                List
                Queue
                Set
to store collection of objects(what type of data)
both similar data and as well as different data(homogeneous,hetrogeneous)
 
Wrapper classes(coverting primitive data to objetcs--boxing and covert objetcs to primitive data --unboxing)
int----Integer
float--Float
char-Char
double--Double
long---Long
byte---Byte
 
List:
it is used to store collection objects
It allows to store duplicate data also
Its dynamic nature
It follows the insertion order
indexed
multiple null values
 
Queue:
it is used to store collection objects
It allows to store duplicate data also
Its dynamic nature
It follows the insertion order but except priority queue
indexed
multiple null values
 
Set:
it is used to store collection objects
It allows to store unique data 
Its dynamic nature
It does not follows the insertion order
not indexed
only one null value
------------------------------------------------------------------
 
List Interface:
Implemented classes
1.ArrayList
2.LinkedList
3.Vector
4.Stack
-----------------------------------------------------------
Queue Interface:
1.Priority Queue
 
Deque Interface
1.ArrayDeque
------------------------------------------------------------
Set Inteface
 
1.HashSet
2.LinkedHashSet
 
SortedSet Interface
1.TreeSet
 
--------------------------------------------------------------------------------
List:
 
ArrayList
ArrayList uses Dynamic array to store the data
it is used to store collection objects
It allows to store duplicate data also
Its dynamic nature
It follows the insertion order
indexed
multiple null values
 
Sytax:
int a[]=new int[]
 
List list=new ArrayList();
or
ArrayList list=new ArrayList();